#nginx -g 'daemon off;'
daemon off;

worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Define the backend Kubernetes API server
    upstream kube_api_backend {
        # IMPORTANT: Verify this IP/Port. Use the 'server' address from 'kind get kubeconfig'
        # This assumes kind is running locally and exposed on 127.0.0.1:6443
        server 127.0.0.1:6443;
    }

    # https://stackoverflow.com/questions/66375380/kubectl-proxy-behind-nginx-invalid-upgrade-response
    # Note: map directive should be declared in http, but not server context
    map $http_upgrade $connection_upgrade {
        # $connection_upgrade will have value "upgrade" only if $http_upgrade is not empty
        default "upgrade";
        ""      "";
    }

    server {
        listen 8443 ssl; # Port Nginx listens on
        server_name localhost 127.0.0.1; # Or your relevant hostname

        # SSL configuration for Nginx frontend
        ssl_certificate nginx_certs/nginx.crt;
        ssl_certificate_key nginx_certs/nginx.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        #access_log /var/log/nginx/access.log; # Adjust path if needed
        #error_log /var/log/nginx/error.log;   # Adjust path if needed
        access_log /dev/stdout;
        error_log /dev/stderr;

        # === Handling for .well-known endpoint ===
        location = /.well-known/oauth-authorization-server {
            # Return a 200 OK with minimal valid-looking JSON
            # This *fools* oc login's discovery step but doesn't provide real OAuth
            add_header Content-Type 'application/json';
            return 200 '{ "issuer": "https://127.0.0.1:8443", "authorization_endpoint": "http://oauth-server.127.0.0.1.sslip.io/auth", "token_endpoint": "http://oauth-server.127.0.0.1.sslip.io/token",   "scopes_supported": ["user:check-access","user:full","user:info","user:list-projects","user:list-scoped-projects"], "response_types_supported": ["code","token"], "grant_types_supported": ["authorization_code","implicit"], "code_challenge_methods_supported": ["plain","S256"] }';
        }

        # === Proxying all other requests to Kubernetes API ===
        location / {
            # Proxy to the upstream defined above
            proxy_pass https://kube_api_backend;

            # Set headers for the backend
            proxy_set_header Host $host; # Forward original host header
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # WebSocket support (needed for exec/attach/port-forward)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_read_timeout 86400; # Long timeout for streaming connections

            # SSL configuration for backend connection
            proxy_ssl_server_name on; # Send SNI to backend

            # IMPORTANT SECURITY NOTE:
            # This trusts ANY certificate presented by the backend (127.0.0.1:6443)
            # OK for default kind setup with self-signed certs, but insecure otherwise.
            proxy_ssl_verify off;

            # SAFER ALTERNATIVE (Recommended for production/shared environments):
            # 1. Extract the CA certificate from your kind kubeconfig file into a file (e.g., kind-ca.crt)
            # 2. Use these directives instead of 'proxy_ssl_verify off;':
            # proxy_ssl_trusted_certificate /path/to/your/kind-ca.crt; # Adjust path
            # proxy_ssl_verify on;
            # proxy_ssl_name $proxy_host; # Verify CN matches the upstream host
        }
    }
}
