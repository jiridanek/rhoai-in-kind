on:
  pull_request:
  push:
  workflow_dispatch:

jobs:
  rhoai-in-kind:
    runs-on: ubuntu-latest

    env:
      ARGOCD_VERSION: v2.14.9

    steps:

      - uses: actions/checkout@v4

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /tmp/argocd-${ARGOCD_VERSION} https://github.com/argoproj/argo-cd/releases/download/${ARGOCD_VERSION}/argocd-linux-amd64
          chmod +x /tmp/argocd-${ARGOCD_VERSION}
          sudo mv /tmp/argocd-${ARGOCD_VERSION} /usr/local/bin/argocd
          argocd version --client

      - name: Kubernetes KinD Cluster
        uses: helm/kind-action@v1
        with:
          version: v0.27.0
          cluster_name: kind
          config: components/00-kind-cluster.yaml

      # https://istio.io/latest/docs/tasks/traffic-management/ingress/gateway-api/#setup
      # https://ryandeangraham.medium.com/istio-gateway-api-nodeport-c598a21c4c95
      - name: Install Istio
        run: |
          # TLSRoute is considered "experimental"
          # https://github.com/kubernetes-sigs/gateway-api/issues/2643
          kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \
          { kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd/experimental?ref=v1.2.1" | kubectl apply -f -; }

          curl -L https://istio.io/downloadIstio | sh -
          istio-${ISTIO_VERSION}/bin/istioctl install --set values.pilot.env.PILOT_ENABLE_ALPHA_GATEWAY_API=true --set profile=minimal -y

          kubectl apply -f components/06-gateway.yaml

          kubectl wait -n istio-system --for=condition=programmed gateways.gateway.networking.k8s.io gateway
          export INGRESS_HOST=$(kubectl get gateways.gateway.networking.k8s.io gateway -n istio-system -ojsonpath='{.status.addresses[0].value}')
        env:
          ISTIO_VERSION: 1.25.1
          TARGET_ARCH: x86_64

      - name: Setup Gateway
        run: kubectl apply -f components/06-gateway.yaml

      - name: Install ArgoCD
        run: |
          kubectl create -k components/01-argocd
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=120s

      - name: Install Kyverno
        run: |
          kubectl create -k components/02-kyverno
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/part-of=kyverno -n kyverno --timeout=120s

      - name: Deploy fake CRDs
        run: kubectl apply -k components/crds

      - run: kubectl create namespace redhat-ods-applications

      - name: Login to ArgoCD
        run: |
          kubectl config set-context --current --namespace=argocd
          argocd login --core
          argocd cluster add kind-kind --yes

      - name: Install KF Pipelines
        run: |
          kubectl apply -f components/03-kf-pipelines.yaml

          argocd app sync kf-pipelines
          
          # wait for argocd to sync the application
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=data-science-pipelines-operator -n redhat-ods-applications --timeout=120s

      - name: Install Service CA Operator
        run: |
          kubectl label node --all node-role.kubernetes.io/master=
          timeout 30s bash -c 'while ! kubectl apply -k components/05-ca-operator; do sleep 1; done'

      - name: Install fake oauth-server
        run: kubectl apply -k components/oauth-server

      - name: Install ODH Dashboard
        run: |
          kubectl apply -f components/04-odh-dashboard.yaml
          
          argocd app sync odh-dashboard

      - name: Set fake DSC and DSCI
        run: kubectl apply -f components/07-dsc-dsci.yaml
