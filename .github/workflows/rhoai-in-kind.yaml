on:
  pull_request:
  push:
  workflow_dispatch:

jobs:
  rhoai-in-kind:
    runs-on: ubuntu-latest

    env:
      ARGOCD_VERSION: v2.14.9

    steps:

      - uses: actions/checkout@v4

      - uses: actions/checkout@v4
        with:
          repository: opendatahub-io/odh-dashboard
          ref: main
          path: odh-dashboard
          sparse-checkout: |
            frontend/

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /tmp/argocd-${ARGOCD_VERSION} https://github.com/argoproj/argo-cd/releases/download/${ARGOCD_VERSION}/argocd-linux-amd64
          chmod +x /tmp/argocd-${ARGOCD_VERSION}
          sudo mv /tmp/argocd-${ARGOCD_VERSION} /usr/local/bin/argocd
          argocd version --client

      - name: Install OC client
        run: |
          curl -L https://mirror.openshift.com/pub/openshift-v4/$(uname -m)/clients/ocp/stable/openshift-client-linux.tar.gz \
            -o /tmp/openshift-client-linux.tar.gz
          tar -xzvf /tmp/openshift-client-linux.tar.gz oc
          sudo mv ./oc /usr/local/bin/oc
          rm -f /tmp/openshift-client-linux.tar.gz
          
          oc version

      - name: Kubernetes KinD Cluster
        uses: helm/kind-action@v1
        with:
          version: v0.27.0
          # Dashboard tests fail on k8s 1.32
          # https://hub.docker.com/r/kindest/node/tags
          node_image: "docker.io/kindest/node:v1.31.6"
          cluster_name: kind
          config: components/00-kind-cluster.yaml

      # https://istio.io/latest/docs/setup/platform-setup/kind/
      # https://istio.io/latest/docs/tasks/traffic-management/ingress/gateway-api/#setup
      # https://ryandeangraham.medium.com/istio-gateway-api-nodeport-c598a21c4c95
      - name: Install Istio
        run: |
          # TLSRoute is considered "experimental"
          # https://github.com/kubernetes-sigs/gateway-api/issues/2643
          kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \
          { kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd/experimental?ref=v1.2.1" | kubectl apply -f -; }

          curl -L https://istio.io/downloadIstio | sh -
          istio-${ISTIO_VERSION}/bin/istioctl install --set values.pilot.env.PILOT_ENABLE_ALPHA_GATEWAY_API=true --set profile=minimal -y

          kubectl apply -f components/06-gateway.yaml

          kubectl wait -n istio-system --for=condition=programmed gateways.gateway.networking.k8s.io gateway
          export INGRESS_HOST=$(kubectl get gateways.gateway.networking.k8s.io gateway -n istio-system -ojsonpath='{.status.addresses[0].value}')
        env:
          ISTIO_VERSION: 1.25.1
          TARGET_ARCH: x86_64

      - name: Setup Gateway
        run: kubectl apply -f components/06-gateway.yaml

      - name: Install ArgoCD
        run: |
          kubectl create -k components/01-argocd
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=120s

      - name: Install Kyverno
        run: |
          kubectl create -k components/02-kyverno
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/part-of=kyverno -n kyverno --timeout=120s
          oc wait --for=condition=Ready clusterpolicy --all

      - name: Deploy fake CRDs
        run: kubectl apply -k components/crds

      - name: Deploy api-extension
        run: |
          kubectl apply -k components/api-extension

          kubectl wait -n api-extension deployment/apiserver --for=condition=Available --timeout=100s

      - if: "!cancelled()"
        run: kubectl logs -n api-extension deployment/apiserver

      - name: Check that API extension server works
        run: timeout 30s bash -c 'while ! oc new-project dsp-wb-test; do sleep 1; done'

      - run: kubectl create namespace redhat-ods-applications

      - name: Login to ArgoCD
        run: |
          kubectl config set-context --current --namespace=argocd
          argocd login --core
          argocd cluster add kind-kind --yes

      # not needed at the moment
      # actually needed, did something that DSP Workbenches dashboard tab won't load without

      - name: Install KF Pipelines
        run: |
          kubectl apply -f components/03-kf-pipelines.yaml

          timeout 30s bash -c 'while ! argocd app sync kf-pipelines; do sleep 1; done'

          # wait for argocd to sync the application
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=data-science-pipelines-operator -n redhat-ods-applications --timeout=120s

      - name: Install KF Notebooks
        run: |
          kubectl apply -k components/09-kf-notebooks

      - name: Install Workbenches
        run: |
          kubectl apply -k components/08-workbenches

      - name: Install Service CA Operator
        run: |
          kubectl label node --all node-role.kubernetes.io/master=
          timeout 30s bash -c 'while ! kubectl apply -k components/05-ca-operator; do sleep 1; done'

      - name: Install fake oauth-server
        run: kubectl apply -k components/oauth-server

      - name: Create admin-user
        run: |
          kubectl create serviceaccount -n oauth-server admin-user
          kubectl create clusterrolebinding -n oauth-server admin-user --clusterrole cluster-admin --serviceaccount=oauth-server:admin-user

      - name: Install ODH Dashboard
        run: |
          kubectl apply -f components/04-odh-dashboard.yaml
          
          # was getting a CRD missing error, somehow argo was not waiting to establish OdhDocument?
          timeout 30s bash -c 'while ! argocd app sync odh-dashboard; do sleep 1; done'

      - name: Set fake DSC and DSCI
        run: kubectl apply -f components/07-dsc-dsci.yaml

      - name: "Install local-path provisioner"
        run: |
          set -Eeuxo pipefail
          kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.31/deploy/local-path-storage.yaml
          kubectl wait deployments --all --namespace=local-path-storage --for=condition=Available --timeout=100s
          # https://kubernetes.io/docs/tasks/administer-cluster/change-default-storage-class/
          kubectl get storageclass
          #kubectl patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
          # dashboard tests expect a storage class standard-csi
          kubectl apply -f - <<EOF
          ---
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            annotations:
              storageclass.kubernetes.io/is-default-class: "true"
            name: standard-csi
          provisioner: rancher.io/local-path
          reclaimPolicy: Delete
          volumeBindingMode: WaitForFirstConsumer
          EOF

      # this is probably better done with Kyverno

      #- name: Bring down Small workbench resource requests
      #  run: |
      #    components/patch-workbench-resource-requests.sh

      #- name: Install pnpm
      #  run: |
      #    # https://pnpm.io/installation#using-corepack
      #    corepack enable pnpm
      #    # https://github.com/pnpm/pnpm/issues/5344
      #    corepack use pnpm@latest
      #    corepack prepare pnpm@latest --activate
      #  working-directory: odh-dashboard/frontend

      # https://pnpm.io/continuous-integration#github-actions
      - name: Use Node.js with npm caching
        uses: actions/setup-node@v4
        with:
          cache: 'npm'

      - name: Setup cypress
        run: |
          set -Eeuxo pipefail

          # tput: No value for $TERM and no -T specified
          sudo apt-get update
          sudo apt-get install -y xterm ncurses-bin

          # sudo apt install -y libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libxtst6 xauth xvfb
          npm install
        working-directory: odh-dashboard/frontend

      - name: Run cypress
        run: |
          set -Eeuxo pipefail
          # cypress run -b chrome --project src/__tests__/cypress --env skipTags=@Bug,grepTags=@Smoke --config video=true
          CY_TEST_CONFIG=${{ github.workspace }}/test-variables.yml npm run cypress:run -- --spec '**/workbenches/workbenches.cy.ts'
        working-directory: odh-dashboard/frontend
        env:
          TERM: xterm

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-report
          path: odh-dashboard/frontend/src/__tests__/cypress/results/e2e/index.html

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: odh-dashboard/frontend/src/__tests__/cypress/results/e2e/screenshots

      - uses: actions/upload-artifact@v4
        if: "!cancelled()"
        with:
          name: cypress-videos
          path: odh-dashboard/frontend/src/__tests__/cypress/results/e2e/videos
